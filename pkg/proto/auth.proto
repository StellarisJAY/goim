syntax = "proto3";
package auth;
option go_package = "./pb";

message AuthRequest {
  string account = 1;
  string deviceID = 2;
  string password = 3;
  string ip = 4;
}
message AuthResponse {
  int32 code = 1;
  string message = 2;
  string token = 3;
}

message LoginRequest {
  string token = 1;
  string gateway = 2;
  string channel = 3;
  int64 userID = 4;
  string deviceID = 5;
}

message LoginResponse {
  int32 code = 1;
  string message = 2;
  int64 userID = 3;
  string deviceID = 4;
}

message RegisterRequest {
  string account = 1;
  string nickName = 2;
  string password = 3;
}

message RegisterResponse {
  int32 code = 1;
  string message = 2;
}

message KickSessionRequest {
  int64 userID = 1;
  string deviceID = 2;
}

message KickSessionResponse {
  int32 code = 1;
  string message = 2;
}

message UpdateTokenRequest {
  int64 userID = 1;
  string deviceID = 2;
}

message UpdateTokenResponse {
  int32 code = 1;
  string message = 2;
  string token = 3;
}

// 授权服务
service Auth {
  // AuthorizeDevice 设备授权，客户端设备登录时会调用该接口，生成与设备ID、用户ID绑定的Token，作为后续的权限认证Token
  rpc AuthorizeDevice(AuthRequest) returns (AuthResponse) {}
  // LoginDevice 设备登录，客户端设备调用该接口完成websocket连接的授权，并在缓存中存储设备的会话信息（网关id、网关channel）
  rpc LoginDevice(LoginRequest) returns (LoginResponse) {}
  // Register 注册
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  // KickSession 踢出已经断开的session
  rpc KickSession(KickSessionRequest) returns (KickSessionResponse) {}
  // UpdateToken 为客户端更新即将过期的token
  rpc UpdateToken(UpdateTokenRequest) returns (UpdateTokenResponse) {}
}